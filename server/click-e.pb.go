// Code generated by protoc-gen-go. DO NOT EDIT.
// source: click-e.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a337b6f4578009, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Count struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Count) Reset()         { *m = Count{} }
func (m *Count) String() string { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()    {}
func (*Count) Descriptor() ([]byte, []int) {
	return fileDescriptor_87a337b6f4578009, []int{1}
}

func (m *Count) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Count.Unmarshal(m, b)
}
func (m *Count) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Count.Marshal(b, m, deterministic)
}
func (m *Count) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Count.Merge(m, src)
}
func (m *Count) XXX_Size() int {
	return xxx_messageInfo_Count.Size(m)
}
func (m *Count) XXX_DiscardUnknown() {
	xxx_messageInfo_Count.DiscardUnknown(m)
}

var xxx_messageInfo_Count proto.InternalMessageInfo

func (m *Count) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "main.Empty")
	proto.RegisterType((*Count)(nil), "main.Count")
}

func init() { proto.RegisterFile("click-e.proto", fileDescriptor_87a337b6f4578009) }

var fileDescriptor_87a337b6f4578009 = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xc9, 0x4c,
	0xce, 0xd6, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53,
	0x62, 0xe7, 0x62, 0x75, 0xcd, 0x2d, 0x28, 0xa9, 0x54, 0x92, 0xe5, 0x62, 0x75, 0xce, 0x2f, 0xcd,
	0x2b, 0x11, 0x12, 0xe1, 0x62, 0x2d, 0x4b, 0xcc, 0x29, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60,
	0x0d, 0x82, 0x70, 0x8c, 0x2a, 0xb8, 0xd8, 0x9c, 0x41, 0xda, 0x5d, 0x85, 0xe4, 0xb9, 0x98, 0x3d,
	0xf3, 0x92, 0x85, 0xb8, 0xf5, 0x40, 0xfa, 0xf5, 0xc0, 0x9a, 0xa5, 0xa0, 0x1c, 0x88, 0x01, 0x2a,
	0x5c, 0x1c, 0xee, 0xa9, 0x25, 0x10, 0x36, 0x6e, 0x55, 0xea, 0x5c, 0x9c, 0xc1, 0xa5, 0x49, 0xc5,
	0xc9, 0x45, 0x99, 0x49, 0xa9, 0xb8, 0x95, 0x19, 0x30, 0x26, 0xb1, 0x81, 0x9d, 0x6b, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x1d, 0xc9, 0xc3, 0x7f, 0xbf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClickEClient is the client API for ClickE service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClickEClient interface {
	Inc(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Count, error)
	GetCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Count, error)
	Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClickE_SubscribeClient, error)
}

type clickEClient struct {
	cc *grpc.ClientConn
}

func NewClickEClient(cc *grpc.ClientConn) ClickEClient {
	return &clickEClient{cc}
}

func (c *clickEClient) Inc(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/main.ClickE/Inc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickEClient) GetCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/main.ClickE/GetCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickEClient) Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClickE_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClickE_serviceDesc.Streams[0], "/main.ClickE/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &clickESubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClickE_SubscribeClient interface {
	Recv() (*Count, error)
	grpc.ClientStream
}

type clickESubscribeClient struct {
	grpc.ClientStream
}

func (x *clickESubscribeClient) Recv() (*Count, error) {
	m := new(Count)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClickEServer is the server API for ClickE service.
type ClickEServer interface {
	Inc(context.Context, *Empty) (*Count, error)
	GetCount(context.Context, *Empty) (*Count, error)
	Subscribe(*Empty, ClickE_SubscribeServer) error
}

// UnimplementedClickEServer can be embedded to have forward compatible implementations.
type UnimplementedClickEServer struct {
}

func (*UnimplementedClickEServer) Inc(ctx context.Context, req *Empty) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inc not implemented")
}
func (*UnimplementedClickEServer) GetCount(ctx context.Context, req *Empty) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCount not implemented")
}
func (*UnimplementedClickEServer) Subscribe(req *Empty, srv ClickE_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterClickEServer(s *grpc.Server, srv ClickEServer) {
	s.RegisterService(&_ClickE_serviceDesc, srv)
}

func _ClickE_Inc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickEServer).Inc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClickE/Inc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickEServer).Inc(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickE_GetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickEServer).GetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClickE/GetCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickEServer).GetCount(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickE_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClickEServer).Subscribe(m, &clickESubscribeServer{stream})
}

type ClickE_SubscribeServer interface {
	Send(*Count) error
	grpc.ServerStream
}

type clickESubscribeServer struct {
	grpc.ServerStream
}

func (x *clickESubscribeServer) Send(m *Count) error {
	return x.ServerStream.SendMsg(m)
}

var _ClickE_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.ClickE",
	HandlerType: (*ClickEServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inc",
			Handler:    _ClickE_Inc_Handler,
		},
		{
			MethodName: "GetCount",
			Handler:    _ClickE_GetCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ClickE_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "click-e.proto",
}
